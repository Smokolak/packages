name       : systemd
version    : '257.10'
release    : 176
source     :
    - https://github.com/systemd/systemd/archive/refs/tags/v257.10.tar.gz : 5a2f477e6268630f6e2829c7bb3e442017549798a4122635817934eaa0c6ac10
license    :
    - LGPL-2.1-or-later
    - GPL-2.0-or-later
component  :
    - system.base
    - devel : system.devel
homepage   : https://www.github.com/systemd/systemd
summary    : System and Service Manager
description: |
    systemd is a system and service manager for Linux, compatible with SysV and LSB init scripts. systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, supports snapshotting and restoring of the system state, maintains mount and automount points and implements an elaborate transactional dependency-based service control logic. It can work as a drop-in replacement for sysvinit.
autodep    : false
clang      : true
emul32     : true
libsplit   : false
optimize   :
    - size
    - lto
builddeps  :
    - pkgconfig32(libcap)
    - pkgconfig32(libgcrypt)
    - pkgconfig32(libxcrypt)
    - pkgconfig32(libzstd)
    - pkgconfig32(mount)
    - pkgconfig(blkid)
    - pkgconfig(bzip2)
    - pkgconfig(dbus-1)
    - pkgconfig(fdisk)
    - pkgconfig(glib-2.0)
    - pkgconfig(gpg-error)
    - pkgconfig(libacl)
    - pkgconfig(libarchive)
    - pkgconfig(libattr)
    - pkgconfig(libbpf)
    - pkgconfig(libcryptsetup)
    - pkgconfig(libcurl)
    - pkgconfig(libdw)
    - pkgconfig(libffi)
    - pkgconfig(libfido2)
    - pkgconfig(libidn2)
    - pkgconfig(libkmod)
    - pkgconfig(liblz4)
    - pkgconfig(liblzma)
    - pkgconfig(libmicrohttpd)
    - pkgconfig(libpcre2-8)
    - pkgconfig(libqrencode)
    - pkgconfig(libseccomp)
    - pkgconfig(openssl)
    - pkgconfig(p11-kit-1)
    - pkgconfig(pam)
    - pkgconfig(polkit-gobject-1)
    - pkgconfig(pwquality)
    - pkgconfig(tss2-esys)
    - pkgconfig(xkbcommon)
    - pkgconfig(zlib)
    - docbook-xml
    - gperf
    - libxslt
    - linux-tools-bpftool
    - python-jinja
    - python-pyelftools
    - rsync
    - sbsigntools
rundeps    :
    - 32bit :
        - libcap2-32bit
        - libgcrypt-32bit
    - 32bit-devel :
        - libcap2-32bit-devel
        - libgcrypt-32bit-devel
        - xz-32bit-devel
        - zstd-32bit-devel
    - devel :
        - libcap2-devel
        - libgcrypt-devel
        - xz-devel
        - zstd-devel
    - font-terminus-console
    - kernel-glue
    - libgcrypt
setup      : |
    # Downstream patches
    %patch -p1 -i $pkgfiles/patches/downstream/0001-tmpfiles-Make-var-cache-ldconfig-world-readable.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-downstream-Disable-kernel-auditing-by-default.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-tmpfiles-Allow-nsswitch-clobber-at-non-boot-interval.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-gpt-auto-generate-Stop-automounting-xbootldr-and-esp.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-path-lookup-Include-stateless-xdg-path-by-default.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-downstream-Allow-default-font-to-be-set.patch
    %patch -p1 -i $pkgfiles/patches/downstream/0001-Don-t-build-32bit-EFI-stub.patch

    # Upstream patches
    %patch -p1 -i $pkgfiles/patches/upstream/0001-boot-only-link-libgcc-when-compiler-is-gcc.patch

    # ERROR: File fuzz-unit-file/dm-back-slash.swap does not exist.
    mv "test/fuzz/fuzz-unit-file/dm-back\x2dslash.swap" "test/fuzz/fuzz-unit-file/dm-back-slash.swap"

    _IS_64BIT_BOOL="true"
    _IS_64BIT_FEAT="enabled"

    if [[ "${EMUL32BUILD}" ]]; then
        _IS_64BIT_BOOL="false"
        _IS_64BIT_FEAT="disabled"
    fi

    %meson_configure \
        --prefix=/usr \
        --bindir=/usr/bin \
        --sbindir=/usr/sbin \
        -Dacl=${_IS_64BIT_FEAT} \
        -Dadm-group=true \
        -Danalyze=${_IS_64BIT_BOOL} \
        -Dbacklight=${_IS_64BIT_BOOL} \
        -Dbinfmt=${_IS_64BIT_BOOL} \
        -Dblkid=${_IS_64BIT_FEAT} \
        -Dbootloader=${_IS_64BIT_FEAT} \
        -Dbpf-compiler="clang" \
        -Dbpf-framework=${_IS_64BIT_FEAT} \
        -Dbzip2=${_IS_64BIT_FEAT} \
        -Dcoredump=${_IS_64BIT_BOOL} \
        -Dcreate-log-dirs=false \
        -Ddefault-compression=zstd \
        -Ddefault-dnssec=no \
        -Ddefault-llmnr=resolve \
        -Ddefault-mdns=no \
        -Ddefault-timeout-sec=30 \
        -Ddefault-user-timeout-sec=30 \
        -Ddns-over-tls=${_IS_64BIT_BOOL} \
        -Defi=${_IS_64BIT_BOOL} \
        -Delfutils=${_IS_64BIT_FEAT} \
        -Denvironment-d=${_IS_64BIT_BOOL} \
        -Dfdisk=${_IS_64BIT_FEAT} \
        -Dfirstboot=${_IS_64BIT_BOOL} \
        -Dfuzz-tests=false \
        -Dgshadow=${_IS_64BIT_BOOL} \
        -Dhibernate=${_IS_64BIT_BOOL} \
        -Dhomed=${_IS_64BIT_FEAT} \
        -Dhostnamed=${_IS_64BIT_BOOL} \
        -Didn=${_IS_64BIT_BOOL} \
        -Dima=${_IS_64BIT_BOOL} \
        -Dinitrd=${_IS_64BIT_BOOL} \
        -Dinstall-sysconfdir=false \
        -Dinstall-tests=false \
        -Dipe=${_IS_64BIT_BOOL} \
        -Dkernel-install=false \
        -Dkmod=${_IS_64BIT_FEAT} \
        -Dldconfig=${_IS_64BIT_BOOL} \
        -Dlibarchive=${_IS_64BIT_FEAT} \
        -Dlibcryptsetup=${_IS_64BIT_FEAT} \
        -Dlibcurl=${_IS_64BIT_FEAT} \
        -Dlibfido2=${_IS_64BIT_FEAT} \
        -Dlibidn2=${_IS_64BIT_FEAT} \
        -Dlocaled=${_IS_64BIT_BOOL} \
        -Dlogind=${_IS_64BIT_BOOL} \
        -Dmachined=${_IS_64BIT_BOOL} \
        -Dman=${_IS_64BIT_FEAT} \
        -Dmicrohttpd=${_IS_64BIT_FEAT} \
        -Dmode=release \
        -Dmountfsd=${_IS_64BIT_BOOL} \
        -Dnetworkd=${_IS_64BIT_BOOL} \
        -Dnobody-group=nobody \
        -Dnobody-user=nobody \
        -Dnsresourced=${_IS_64BIT_BOOL} \
        -Dnss-systemd=true \
        -Dntp-servers='0.solus.pool.ntp.org 1.solus.pool.ntp.org 2.solus.pool.ntp.org 3.solus.pool.ntp.org' \
        -Dok-color=highlight-blue \
        -Doomd=${_IS_64BIT_BOOL} \
        -Dopenssl=${_IS_64BIT_FEAT} \
        -Dp11kit=${_IS_64BIT_FEAT} \
        -Dpam=${_IS_64BIT_FEAT} \
        -Dpamconfdir="/usr/share/defaults/etc/pam.d" \
        -Dpamlibdir="%libdir%/security" \
        -Dpcre2=${_IS_64BIT_FEAT} \
        -Dpolkit=${_IS_64BIT_FEAT} \
        -Dportabled=${_IS_64BIT_BOOL} \
        -Dpstore=${_IS_64BIT_BOOL} \
        -Dpwquality=${_IS_64BIT_FEAT} \
        -Dqrencode=${_IS_64BIT_FEAT} \
        -Dquotacheck=${_IS_64BIT_BOOL} \
        -Drandomseed=${_IS_64BIT_BOOL} \
        -Drepart=${_IS_64BIT_FEAT} \
        -Dresolve=true \
        -Drfkill=${_IS_64BIT_BOOL} \
        -Drpmmacrosdir=no \
        -Dsbat-distro="solus" \
        -Dsbat-distro-summary="Solus Project" \
        -Dsbat-distro-pkgname="systemd" \
        -Dsbat-distro-version="$version" \
        -Dsbat-distro-url="https://getsol.us/" \
        -Dseccomp=${_IS_64BIT_FEAT} \
        -Dshellprofiledir="/usr/share/defaults/etc/profile.d" \
        -Dslow-tests=false \
        -Dsmack=${_IS_64BIT_BOOL} \
        -Dsplit-bin=true \
        -Dsshconfdir="/usr/share/defaults/ssh/ssh_config.d" \
        -Dsshdconfdir="/usr/share/defaults/ssh/sshd_config.d" \
        -Dstatus-unit-format-default=combined \
        -Dstoragetm=${_IS_64BIT_BOOL} \
        -Dsysext=${_IS_64BIT_BOOL} \
        -Dsysupdate=disabled \
        -Dsysupdated=disabled \
        -Dsysusers=${_IS_64BIT_BOOL} \
        -Dsysvinit-path="" \
        -Dtests=false \
        -Dtimedated=${_IS_64BIT_BOOL} \
        -Dtimesyncd=${_IS_64BIT_BOOL} \
        -Dtmpfiles=${_IS_64BIT_BOOL} \
        -Dtpm=${_IS_64BIT_BOOL} \
        -Dtpm2=${_IS_64BIT_FEAT} \
        -Duser-path=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin \
        -Duserdb=${_IS_64BIT_BOOL}  \
        -Dusers-gid=100 \
        -Dutmp=${_IS_64BIT_BOOL} \
        -Dvconsole=${_IS_64BIT_BOOL} \
        -Dxdg-autostart=${_IS_64BIT_BOOL} \
        -Dxkbcommon=${_IS_64BIT_FEAT} \
        -Dzlib=${_IS_64BIT_FEAT}
build      : |
    %ninja_build
install    : |
    %ninja_install

    # Solus is responsible for its own glibc + PAM configuration, *not* systemd..
    rm -rfv $installdir/usr/share/factory/*

    # Only need to do the rest of the stuff on 64-bit build
    if [[ ! -z "${EMUL32BUILD}" ]]; then
        exit 0
    fi

    # Configure solus-specific-timeout values for units
    install -Dm00644 -t $installdir/usr/lib/systemd/system.conf.d/ $pkgfiles/configs/timeouts.conf
    install -Dm00644 -t $installdir/usr/lib/systemd/journald.conf.d/ $pkgfiles/configs/journald.conf
    install -Dm00644 -t $installdir/usr/lib/systemd/system/service.d/ $pkgfiles/configs/10-timeout-abort.conf

    # User config defaults
    install -Dm00644 -t $installdir/usr/lib/systemd/user.conf.d/ $pkgfiles/configs/timeouts.conf

    # Default to BFQ scheduler for rotational drives, and kyber for sata/nvme SSDs
    install -Dm00644 -t $installdir/usr/lib/udev/rules.d/ $pkgfiles/configs/60-block-scheduler.rules

    # Enable systemd-resolved by default
    ln -sv ../systemd-resolved.service $installdir/usr/lib/systemd/system/sysinit.target.wants/systemd-resolved.service

    # Enable systemd-timesyncd by default
    ln -sv ../systemd-timesyncd.service $installdir/usr/lib/systemd/system/sysinit.target.wants/systemd-timesyncd.service
    ln -sv systemd-timesyncd.service $installdir/usr/lib/systemd/system/dbus-org.freedesktop.timesync1.service

    # Enable audit collection by default
    install -dm00755 $installdir/usr/lib/systemd/system/systemd-journald.service.wants/
    ln -sv ../systemd-journald-audit.socket $installdir/usr/lib/systemd/system/systemd-journald.service.wants/systemd-journald-audit.socket
    ln -sv ../systemd-journald-audit.socket $installdir/usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket

    # Enable user tmpfiles cleanup by default
    install -dm00755 $installdir/usr/lib/systemd/user/timers.target.wants/
    ln -sv ../systemd-tmpfiles-clean.timer $installdir/usr/lib/systemd/user/timers.target.wants/

    # Enable remote-fs.target by default, allowing users to have mounts in their fstabs
    ln -sv ../remote-fs.target $installdir/usr/lib/systemd/system/multi-user.target.wants/remote-fs.target

    # Install compat dirs
    install -dm00755 $installdir/{,usr/}lib64/udev

    # Compat for old tools
    ln -srv $installdir/usr/lib/systemd/systemd-udevd $installdir/usr/lib64/udev/udevd
    ln -srv $installdir/usr/lib/systemd/systemd-udevd $installdir/lib64/udev/udevd

    # Ensure that XDG_CONFIG_DIRS is set globally
    install -Dm00755 $pkgfiles/50-xdg-config-dirs -t $installdir/usr/lib/systemd/system-environment-generators/

    # Stateless xinitrc.d path
    install -Dm00755 xorg/50-systemd-user.sh -t $installdir/usr/share/defaults/etc/X11/xinit/xinitrc.d/

    # Required basic support
    install -m 00644 $pkgfiles/solus-base-groups.sysusers $installdir/usr/lib/sysusers.d/solus-base-groups.conf

    # add fixed pam config
    rm -rfv $installdir/usr/lib/pam.d
    install -Dm00644 $pkgfiles/systemd-user.pam $installdir/usr/share/defaults/etc/pam.d/systemd-user

    # Sign systemd-boot with our MOK key if it exists
    if [[ -e $pkgfiles/secureboot-keys/MOK.key ]]; then
        sbsign --key $pkgfiles/secureboot-keys/MOK.key \
                --cert $pkgfiles/secureboot-keys/MOK.crt \
                --output $installdir/usr/lib/systemd/boot/efi/systemd-bootx64.efi \
                $installdir/usr/lib/systemd/boot/efi/systemd-bootx64.efi

        install -Dm00644 $pkgfiles/secureboot-keys/MOK.cer $installdir/usr/lib/systemd/boot/solus-mok.cer
    fi

    # Make sure systemd can be found
    ln -srv $installdir/usr/lib/systemd/systemd $installdir/usr/bin/systemd

    rm -rfv $installdir/usr/share/doc/

    # We don't need 32-bit EFI binaries, probably
    # TODO figure out if we actually don't need them. For now leave them in
    # rm -v $installdir/usr/lib/systemd/boot/efi/{addonia32.efi.stub,linuxia32.efi.stub,systemd-bootia32.efi} \
    #       $installdir/usr/share/man/man7/linuxia32.efi.stub.7

    # Stateless. Don't blindly convert any of these to recursive (-r) or force (-f)
    # It's important that all additions and removals are investigated
    rmdir -v $installdir/var/lib/systemd \
             $installdir/var/lib \
             $installdir/var
